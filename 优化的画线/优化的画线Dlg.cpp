
// 优化的画线Dlg.cpp : 实现文件
//

#include "stdafx.h"
#include "优化的画线.h"
#include "优化的画线Dlg.h"
#include "afxdialogex.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 对话框数据
	enum { IDD = IDD_ABOUTBOX };

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(CAboutDlg::IDD)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// C优化的画线Dlg 对话框



C优化的画线Dlg::C优化的画线Dlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(C优化的画线Dlg::IDD, pParent)
	, type(0)
	, draw(FALSE)
	, mpoint(0)
	, lineStyle(3)
	, lineWidth(3)	
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void C优化的画线Dlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(C优化的画线Dlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_WM_LBUTTONDOWN()
	ON_BN_CLICKED(IDC_BUTTON1, &C优化的画线Dlg::线test)
	ON_WM_LBUTTONUP()
	ON_BN_CLICKED(IDC_BUTTON2, &C优化的画线Dlg::mink)
	ON_BN_CLICKED(IDC_BUTTON3, &C优化的画线Dlg::OnBnClickedButton3)
END_MESSAGE_MAP()


// C优化的画线Dlg 消息处理程序

BOOL C优化的画线Dlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 将“关于...”菜单项添加到系统菜单中。

	// IDM_ABOUTBOX 必须在系统命令范围内。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 设置此对话框的图标。当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	// TODO: 在此添加额外的初始化代码
	SetWindowLong (this->m_hWnd,GWL_EXSTYLE,GetWindowLong(this->m_hWnd ,GWL_EXSTYLE )^0x80000);
	HINSTANCE hInst = LoadLibrary(_T("User32.DLL"));
	if(hInst)
	{
		typedef BOOL (WINAPI *MYFUNC)(HWND,COLORREF,BYTE,DWORD);  
		MYFUNC fun = NULL; //取得SetLayeredWindowAttributes函数指针
		fun=(MYFUNC)GetProcAddress(hInst, "SetLayeredWindowAttributes");
		if(fun)
		{  
			fun(this->m_hWnd,0,150,2);   //修改该参数就可以改变窗口透明程度
		}
		FreeLibrary(hInst);
	}
	 SetWindowLong(m_hWnd, GWL_STYLE, GetWindowLong(m_hWnd, GWL_STYLE) & (~(WS_CAPTION | WS_BORDER)));     //移除了对话框的边框
	 this->ShowWindow(SW_SHOWMAXIMIZED);   //对话框最大化  
	
	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

void C优化的画线Dlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void C优化的画线Dlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR C优化的画线Dlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}



void C优化的画线Dlg::OnLButtonDown(UINT nFlags, CPoint point)
{
	// TODO: 在此添加消息处理程序代码和/或调用默认值
	mpoint=point;
	CDialogEx::OnLButtonDown(nFlags, point);
}


void C优化的画线Dlg::线test()
{
	// TODO: 在此添加控件通知处理程序代码
	type=1;
}


void C优化的画线Dlg::OnLButtonUp(UINT nFlags, CPoint point)
{
	// TODO: 在此添加消息处理程序代码和/或调用默认值
	CDC* pDC=GetDC();
    //设置画笔，颜色，并且选择到设备里面；
     CPen pen(lineStyle , lineWidth,m_color );
	 CBrush *pBrush=CBrush::FromHandle((HBRUSH)GetStockObject(WHITE_BRUSH ));
	 pDC->SelectObject (&pen);
	 pDC->SelectObject (&pBrush );
	 pDC->MoveTo (mpoint );
	  pDC->LineTo (point);
	CDialogEx::OnLButtonUp(nFlags, point);

}


void C优化的画线Dlg::mink()
{
	

	ShowWindow(SW_MINIMIZE );
	// TODO: 在此添加控件通知处理程序代码
}




//void C优化的画线Dlg::OnBnClickedButton1()
//{
//	// TODO: 在此添加控件通知处理程序代码
//	CColorDialog dlg;
//	dlg.DoModal ();
//}


void C优化的画线Dlg::OnBnClickedButton3()
{
	// TODO: 在此添加控件通知处理程序代码
	CColorDialog dlg;
	dlg.m_cc.Flags |=CC_RGBINIT;
	dlg.m_cc.rgbResult=m_color;
	if(IDOK==dlg.DoModal ())
	{
		m_color =dlg.m_cc.rgbResult;
	}
	dlg.DoModal ();
}
